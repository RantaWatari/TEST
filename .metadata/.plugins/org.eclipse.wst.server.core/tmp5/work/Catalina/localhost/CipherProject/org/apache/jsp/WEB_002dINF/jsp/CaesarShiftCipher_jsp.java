/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.37
 * Generated at: 2017-07-25 07:15:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class CaesarShiftCipher_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>CaesarShiftCipher-Page</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h1>CaesarShiftCipher</h1>\r\n");
      out.write("\t<ol>\r\n");
      out.write("\t<strong>-目次-</strong>\r\n");
      out.write("\t<li>CaesarShiftCipherとは...</li>\r\n");
      out.write("\t<li>暗号の仕組み ～ 暗号化と復号化</li>\r\n");
      out.write("\t<li>暗号の仕組み ～ アルゴリズムと弱点</li>\r\n");
      out.write("\t<li>当サイトCaesarShiftCipherの使い方</li>\r\n");
      out.write("\t</ol>\r\n");
      out.write("\r\n");
      out.write("<h3>1.CaesarShiftCipherとは...</h3>\r\n");
      out.write("\t<p>当サイトで紹介しているCaesarShiftCipherは私の造語で一般的ではありません。<br>\r\n");
      out.write("\t\t正確には\"単一換字式暗号\"の一種で、ガイウス・ユリウス・カエサルが実際に使用したと言われている、シーザー暗号の仕組み（暗号アルゴリズム）を模倣したものです。</p>\r\n");
      out.write("<h3>2.暗号の仕組み ～ 暗号化と復号化</h3>\r\n");
      out.write("\t<p>ここでは、CaesarShiftCipherの仕組みについて説明します。</p>\r\n");
      out.write("\t<h4>暗号化</h4>\r\n");
      out.write("\t\t<p>CaesarShiftCipherはとてもシンプルな方法で暗号です。<br>\r\n");
      out.write("\t\t\t例えば、\"abz\"（平文）を暗号化したいとしましょう。この平文\"abz\"は鍵（key）を\"1\"にしたとき暗号文\"bca\"に変換されます（図.1）。</p>\r\n");
      out.write("\t\t<p>平　文 :　a b z<br>↓<br>鍵=１<br>↓<br>暗号文:　b c a</p>\r\n");
      out.write("\t\t<p>平文から暗号文へどのように変化したでしょうか？<br>\r\n");
      out.write("\t\t\t鍵の\"1\"に注目して、アルファベットの順番を思い出してください...。<br>\r\n");
      out.write("\t\t\tこれはアルファベット順の各アルファベットの位置を1文字分ずらしたことと同意です。鍵の数字を指定することでアルファベット順を何文字分ずらすか決定できます（図.2）。</p>\r\n");
      out.write("\t\t<p>通常のアルファベット順：　abcdefghijklnmopqustuvwxyz<br>↓<br>鍵=1<br>↓<br>暗号のアルファベット順：　zabcdefghijklnmopqustuvwxy</p>\r\n");
      out.write("\t<h4>復号化</h4>\r\n");
      out.write("\t\t<p>暗号化ではアルファベット順に対応する各文字を鍵に指定した数の分だけずらすというものでした。復号化はこの逆の操作を行なえば良いわけです。<br>\r\n");
      out.write("\t\t\t先の例では、鍵は\"１\"として暗号文\"bca\"を作りました。この操作はアルファベット順を右に1文字ずらしていますので、左に1文字ずらせば元の平文に復号化出来ます。</p>\r\n");
      out.write("<h3>3.暗号の仕組み ～ アルゴリズムと弱点</h3>\r\n");
      out.write("\t<p>この暗号をより良く理解するために、合同算術を用いて説明する方法があります。簡単に説明すると合同算術は\"ある数にある特定の自然数で割ったときの余りの数（剰余）に着目する計算方法\"です。<br>\r\n");
      out.write("\t\t具体例として、私達がよく見るアナログ時計でこの手法を説明出来ます（別にデジタルでも構いませんが...）。<br>\r\n");
      out.write("\t\t例えばこんな問題を考えてみましょう。</p>\r\n");
      out.write("\t\t<strong>「時計の針が1時を指しているとき、15時間後に時計の針は何時を指すだろうか？」</strong>\r\n");
      out.write("\t<p>アナログ時計は1から12時までしかありません。つまり、答えは1以下も12以上にもならないということです。</p>\r\n");
      out.write("\r\n");
      out.write("<h3>4.当サイトCaesarShiftCipherの使い方</h3>\r\n");
      out.write("\t<p></p>\r\n");
      out.write("<a href=\"http://localhost/CaesarShiftCipher/CaesarShiftCipher\">これを使ってみる</a><br><br>\r\n");
      out.write("<a href=\"/CipherProject/\">HOMEに戻る</a>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
